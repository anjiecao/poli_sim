model[model$trials == i, 2:5] <- model[model$trials == i-1, 2:5]
model
i = 1
model[model$trials == i, 2:5] <- model[model$trials == i-1, 2:5]
model[model$trials == i, sample_seq[i]+1] <-  model[model$trials == i-1, sample_seq[i]+1] + 1
i = 1
model[model$trials == i, 2:5] <- model[model$trials == i-1, 2:5]
model[model$trials == i, sample_seq[i]+1] <-  model[model$trials == i-1, sample_seq[i]+1] + 1
model
i = 1
model[model$trials == i, 2:5] <- model[model$trials == i-1, 2:5]
model
model[model$trials == i, sample_seq[i]+1] <-  model[model$trials == i-1, sample_seq[i]+1] + 1
model
sample_seq[i]
sample_seq
sample_seq + 1
sample+seq[i]+1
sample_seq[i]+1
model[model$trials == i, sample_seq[i]+1]
model[model$trials == i-1, sample_seq[i]+1] + 1
est <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
est[1,2:5] <- as.list(prior)
# prob estimate
for (i in 1:length(sample_seq)) {
}
View(est)
View(est)
est <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
View(est)
sample_seq[i]
bin_at_trial_one <- sample_seq[i]
bin_at_trial_one
est[est$trials == i, ]
est[est$trials == i, ]
i
i = 1
bin_at_trial_one <- sample_seq[i]
est[est$trials == i, ]
est[est$trials == i, sample_seq[i] + 1]
# update the bin
est[est$trials == i, bin_at_trial_one + 1]
bin_at_trial_one
i = 1
model[model$trials == i, 2:5] <- model[model$trials == i-1, 2:5]
model
# left hand is to update the corresponding bin the stimuli appears in; +1 because of the header
# right hand is to
model[model$trials == i, sample_seq[i]+1] <-  model[model$trials == i-1, sample_seq[i]+1] + 1
est <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# trial one
i = 1
# which bin does the stimulus appear in trial one?
bin_at_trial_one <- sample_seq[i]
# update the bin
est[est$trials == i, bin_at_trial_one + 1] <- est[est$trials == i-1,
bin_at_trial_one + 1] + 1
#after initial update
est
# prob estimate
for (i in 1:length(sample_seq)) {
appear_in = sample_seq[i]+1
}
View(est)
n <- 15
model <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
model[1,2:5] <- as.list(prior)
for (i in 1:length(sample_seq)) {
model[model$trials == i, 2:5] <- model[model$trials == i-1, 2:5]
model[model$trials == i, sample_seq[i]+1] <-
model[model$trials == i-1, sample_seq[i]+1] + 1
}
View(model)
i = 1
model_current =  model[model$trials == i, 2:5]
View(model_current)
model_current =  model[model$trials == i, 2:5]
model_last = model[model$trials == i-1, 2:5]
View(model_last)
model_current - model_last
model_current =  model[model$trials == i, 2:5]
model_initi = model[model$trials == 0, 2:5]
model_current - model_initi
total_num_observation = i
current_observation_bin = sample_seq[i]
total_num_observation
current_observation_bin
model_current =  model[model$trials == i, 2:5]
model_initi = model[model$trials == 0, 2:5]
model_current - model_initi
(model_current - model_initi)[current_observation_bin]
probablity = (number_of_time_appeared_in_the_bin + 1) / total_num_observation + 4
i = 1
total_num_observation = i
current_observation_bin = sample_seq[i]
model_current =  model[model$trials == i, 2:5]
model_initi = model[model$trials == 0, 2:5]
number_of_time_appeared_in_the_bin = (model_current - model_initi)[current_observation_bin]
probablity = (number_of_time_appeared_in_the_bin + 1) / total_num_observation + 4
View(probablity)
i = 1
total_num_observation = i
current_observation_bin = sample_seq[i]
model_current =  model[model$trials == i, 2:5]
model_initi = model[model$trials == 0, 2:5]
number_of_time_appeared_in_the_bin = (model_current - model_initi)[current_observation_bin]
probablity = (number_of_time_appeared_in_the_bin + 1) / (total_num_observation + 4)
View(probablity)
View(number_of_time_appeared_in_the_bin)
total_num_observation
prob_estimate <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
prob_estimate[model$trials == 0, 2:5]
prob_estimate[model$trials == i, 2:5]
prob_estimate[model$trials == i, current_observation_bin + 1]
prob_estimate[model$trials == i-1, current_observation_bin + 1] + probablity
prob_estimate <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
prob_estimate[1,2:5] <- as.list(prior)
for (i in 1:length(sample_seq)) {
total_num_observation = i
current_observation_bin = sample_seq[i]
model_current =  model[model$trials == i, 2:5]
model_initi = model[model$trials == 0, 2:5]
number_of_time_appeared_in_the_bin = (model_current - model_initi)[current_observation_bin]
# why is the first one not 0.25?
probablity = (number_of_time_appeared_in_the_bin + 1) / (total_num_observation + 4)
prob_estimate[model$trials == i, current_observation_bin + 1] = prob_estimate[model$trials == i-1, current_observation_bin + 1] + probablity
}
prob_estimate <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
prob_estimate[1,2:5] <- as.list(prior)
for (i in 1:length(sample_seq)) {
total_num_observation = i
current_observation_bin = sample_seq[i]
model_current =  model[model$trials == i, 2:5]
model_initi = model[model$trials == 0, 2:5]
number_of_time_appeared_in_the_bin = (model_current - model_initi)[current_observation_bin]
# why is the first one not 0.25?
probablity = (number_of_time_appeared_in_the_bin + 1) / (total_num_observation + 4)
prob_estimate[model$trials == i, current_observation_bin + 1] = prob_estimate[model$trials == i-1, current_observation_bin + 1] + probablity
}
prob_estimate
prob_estimate <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
prob_estimate[1,2:5] <- as.list(prior)
for (i in 1:length(sample_seq)) {
total_num_observation = i
current_observation_bin = sample_seq[i]
model_current =  model[model$trials == i, 2:5]
model_initi = model[model$trials == 0, 2:5]
number_of_time_appeared_in_the_bin = (model_current - model_initi)[current_observation_bin]
# why is the first one not 0.25?
probablity = (number_of_time_appeared_in_the_bin + 1) / (total_num_observation + 4)
# updating the posterior?
prob_estimate[model$trials == i] = prob_estimate[model$trials == i-1]
prob_estimate[model$trials == i, current_observation_bin + 1] = prob_estimate[model$trials == i-1, current_observation_bin + 1] + probablity
}
prob_estimate <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
prob_estimate[1,2:5] <- as.list(prior)
for (i in 1:length(sample_seq)) {
total_num_observation = i
current_observation_bin = sample_seq[i]
model_current =  model[model$trials == i, 2:5]
model_initi = model[model$trials == 0, 2:5]
number_of_time_appeared_in_the_bin = (model_current - model_initi)[current_observation_bin]
# why is the first one not 0.25?
probablity = (number_of_time_appeared_in_the_bin + 1) / (total_num_observation + 4)
# updating the posterior?
prob_estimate[model$trials == i, ] = prob_estimate[model$trials == i-1, ]
prob_estimate[model$trials == i, current_observation_bin + 1] = prob_estimate[model$trials == i-1, current_observation_bin + 1] + probablity
}
prob_estimate
prob_estimate <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
prob_estimate[1,2:5] <- as.list(prior)
for (i in 1:length(sample_seq)) {
total_num_observation = i
current_observation_bin = sample_seq[i]
model_current =  model[model$trials == i, 2:5]
model_initi = model[model$trials == 0, 2:5]
number_of_time_appeared_in_the_bin = (model_current - model_initi)[current_observation_bin]
# why is the first one not 0.25?
probablity = (number_of_time_appeared_in_the_bin + 1) / (total_num_observation + 4)
# updating the posterior?
prob_estimate[model$trials == i, 2:5] = prob_estimate[model$trials == i-1, 2:5]
prob_estimate[model$trials == i, current_observation_bin + 1] = prob_estimate[model$trials == i-1, current_observation_bin + 1] + probablity
}
prob_estimate
View(prob_estimate)
library(tidyverse)
library(permute)
surprise <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
surprise[1,2:5] <- as.list(prior)
View(surprise)
surprise <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
surprise[1,2:5] <- c(0, 0, 0, 0)
i = 1
current_observation_bin = sample_seq[i]
current_observation_bin
model_current =  model[model$trials == i, 2:5]
model_current
prob_current =  prob_estimate[prob_estimate$trials == i, 2:5]
prob_current
prob_current =  prob_estimate[prob_estimate$trials == i, 2:5]
surprise_current = -log(prob_current)
View(surprise_current)
surprise <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
for (i in 1:length(sample_seq)) {
i = 1
current_observation_bin = sample_seq[i]
prob_current =  prob_estimate[prob_estimate$trials == i, 2:5]
surprise_current = -log(prob_current)
surprise[surprise$trials == i, 2:5] = surprise_current
}
surprise
surprise <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
for (i in 1:length(sample_seq)) {
current_observation_bin = sample_seq[i]
prob_current =  prob_estimate[prob_estimate$trials == i, 2:5]
surprise_current = -log(prob_current)
surprise[surprise$trials == i, 2:5] = surprise_current
}
surprise
library(cowplot)
library(tidyverse)
library(here)
library(jsonlite)
library(kableExtra)
library(DT)
library(Dict)
library(ggforce)
library(ggimage)
library(tidyboot)
library(lme4)
library(raincloudplots)
library(RColorBrewer)
library(reshape2)
source(here("writeups/CCRR_CogSci/03_scripts/R_rainclouds.R"))
PROCESSED_MAIN_PATH <- here("writeups/CCRR_CogSci/cogsci_data/tidy_main.csv")
tidy_d <- read_csv(PROCESSED_MAIN_PATH)
raven_summary <- df.main %>%
filter(task_name == "RV") %>%
group_by(culture, subject) %>%
summarise(
accuracy = mean(resp)
) %>%
group_by(culture) %>%
summarise(
culture_mean = round(mean(accuracy),2)
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
library(jsonlite)
library(kableExtra)
library(DT)
library(Dict)
library(ggforce)
library(ggimage)
library(tidyboot)
library(lme4)
source(here("preprocessing/exclude/exclude_task.R"))
source(here("preprocessing/exclude/exclude_complete.R"))
source(here("preprocessing/exclude/exclude_demog.R"))
source(here("preprocessing/extract/extract_demog.R"))
source(here("preprocessing/extract/extract_HIT.R"))
source(here("preprocessing/extract/extract_humanCheck.R"))
source(here("preprocessing/task/ebbinghaus.R"))
source(here("preprocessing/task/RMTS.R"))
source(here("preprocessing/task/self_inflation.R"))
source(here("preprocessing/task/horizon_sticker.R"))
source(here("preprocessing/task/conformity_preference.R"))
source(here("preprocessing/task/raven.R"))
source(here("preprocessing/task/free_description.R"))
source(here("preprocessing/task/causal_attribution.R"))
#get means by ppt and group by country
RV_ms <- tidy_d %>%
filter(task_name == "RV")  %>%
group_by(subject, culture) %>%
summarise(mean = mean(resp)) %>%
group_by(culture) %>%
tidyboot_mean(mean, na.rm=T)
RV_mss <- tidy_d %>%
filter(task_name == "RV")  %>%
group_by(subject, culture) %>%
summarise(mean = mean(resp))
#plot means and CIs
ggplot(RV_ms,
aes(x = culture, y = mean,color = culture)) +
geom_violin(data = RV_mss, show.legend = FALSE,  bw = 0.08)+
geom_jitter(data = RV_mss, width = .2, alpha = 0.2) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), show.legend = FALSE) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))+
ylab("Raven's SPM performance") +
xlab("Country") +
ylim(0,1) +
scale_y_continuous(breaks = seq(0,1,0.25),
labels = {function(x) paste0(as.character(x*100),"%")})+
labs(color='Country') +
theme_classic() +
ggthemes::scale_color_solarized() +
scale_color_manual(values = c("red", "blue"))+
theme(legend.position = "bottom")
ggplot(RV_ms,
aes(x = culture, y = mean,color = culture)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), alpha = .8) +
geom_point(aes(y = resp, color = culture),
position = position_jitter(width = .15, height = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.3)
ggplot(RV_ms,
aes(x = culture, y = mean,color = culture)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), alpha = .8) +
geom_point(aes(y = mean, color = culture),
position = position_jitter(width = .15, height = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.3)
#get means by ppt and group by country
RV_ms <- tidy_d %>%
filter(task_name == "RV")  %>%
group_by(subject, culture) %>%
summarise(mean = mean(resp)) %>%
group_by(culture) %>%
tidyboot_mean(mean, na.rm=T)
RV_mss <- tidy_d %>%
filter(task_name == "RV")  %>%
group_by(subject, culture) %>%
summarise(mean = mean(resp))
#plot means and CIs
ggplot(RV_ms,
aes(x = culture, y = mean,color = culture)) +
geom_violin(data = RV_mss, show.legend = FALSE,  bw = 0.08)+
geom_jitter(data = RV_mss, width = .2, alpha = 0.2) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), show.legend = FALSE) +
guides(colour = guide_legend(override.aes = list(alpha = 1)))+
ylab("Raven's SPM performance") +
xlab("Country") +
ylim(0,1) +
scale_y_continuous(breaks = seq(0,1,0.25),
labels = {function(x) paste0(as.character(x*100),"%")})+
labs(color='Country') +
theme_classic() +
ggthemes::scale_color_solarized() +
scale_color_manual(values = c("red", "blue"))+
theme(legend.position = "bottom")
ggplot(data = RV_ms,
aes(y = resp, x = culture, fill = culture)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), alpha = .8) +
geom_point(aes(y = resp, color = culture),
position = position_jitter(width = .15, height = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.3) +
scale_y_continuous(breaks = seq(0,1,0.5),
labels = {function(x) paste0(as.character(x*100),"%")})+
scale_color_manual(values = c("red", "blue"))+
scale_fill_manual(values = c("red", "blue"))+
guides(fill = FALSE) +
guides(color = FALSE) +
scale_color_manual(values = c("red", "blue"))+
ylab("Preference for unique option") +
xlab("")+
theme_classic() +
labs(title = "Uniqueness Preference") +
theme(plot.title = element_text(hjust = 0.5, size = 8),
plot.subtitle = element_text(hjust = 0.5, size = 6),
text = element_text(size=8))
n <- 15
model <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
model[1,2:5] <- as.list(prior)
for (i in 1:length(sample_seq)) {
model[model$trials == i, 2:5] <- model[model$trials == i-1, 2:5]
model[model$trials == i, sample_seq[i]+1] <-
model[model$trials == i-1, sample_seq[i]+1] + 1
}
i = 1
# i = 1
model
n <- 16
model <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
model[1,2:5] <- as.list(prior)
for (i in 1:length(sample_seq)) {
model[model$trials == i, 2:5] <- model[model$trials == i-1, 2:5]
model[model$trials == i, sample_seq[i]+1] <-
model[model$trials == i-1, sample_seq[i]+1] + 1
}
# i = 1
model
sample_seq
n <- 15
model <- tibble(trials = 0:n,
bin1 = 0,
bin2 = 0,
bin3 = 0,
bin4 = 0)
# set the prior
model[1,2:5] <- as.list(prior)
for (i in 1:length(sample_seq)) {
model[model$trials == i, 2:5] <- model[model$trials == i-1, 2:5]
model[model$trials == i, sample_seq[i]+1] <-
model[model$trials == i-1, sample_seq[i]+1] + 1
}
# i = 1
model
model %>%
mutate(p1 = bin1 / sum(bin1 + bin2 + bin3 + bin4))
model %>%
mutate(total = sum(bin1 + bin2 + bin3 + bin4),
p1 = bin1 / total,
p2 = bin2 / total,
p3 = bin3 / total,
p4 = bin4 / total)
model %>%
mutate(total = rowSums(bin1 + bin2 + bin3 + bin4),
p1 = bin1 / total,
p2 = bin2 / total,
p3 = bin3 / total,
p4 = bin4 / total)
model %>%
rowwise %>%
mutate(total = sum(bin1 + bin2 + bin3 + bin4),
p1 = bin1 / total,
p2 = bin2 / total,
p3 = bin3 / total,
p4 = bin4 / total)
library(magrittr)
model %<>%
rowwise() %>%
mutate(total = sum(bin1 + bin2 + bin3 + bin4),
p1 = bin1 / total,
p2 = bin2 / total,
p3 = bin3 / total,
p4 = bin4 / total)
model
model$observed <- c(NA, sample_seq)
for (i in 1:n) {
p_lasttrial <- c(model$p1[i-1], model$p2[i-1], model$p3[i-1], model$p4[i-1])
model$surprisal[i] <- -log2( p_lasttrial[model$observed[i]]  )
}
model$surprisal <- NA
for (i in 1:n) {
p_lasttrial <- c(model$p1[i-1], model$p2[i-1], model$p3[i-1], model$p4[i-1])
model$surprisal[i] <- -log2( p_lasttrial[model$observed[i]]  )
}
model
