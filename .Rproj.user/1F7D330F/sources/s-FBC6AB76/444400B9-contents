---
title: "02_visualization.R"
author: "alex"
date: "11/13/2020"
output:
  html_document:
    number_sections: no
    toc: yes
    toc_float: yes
  pdf_document:
    toc: yes
---

# Data processing

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)
library(here)
library(jsonlite)
library(kableExtra)
library(DT)
library(Dict)
library(ggforce)
library(ggimage)
library(tidyboot)
library(lme4)

source(here("preprocessing/exclude/exclude_task.R"))
source(here("preprocessing/exclude/exclude_complete.R"))
source(here("preprocessing/exclude/exclude_demog.R"))
source(here("preprocessing/extract/extract_demog.R"))
source(here("preprocessing/extract/extract_HIT.R"))
source(here("preprocessing/extract/extract_humanCheck.R"))

source(here("preprocessing/task/ebbinghaus.R"))
source(here("preprocessing/task/RMTS.R"))
source(here("preprocessing/task/self_inflation.R"))
source(here("preprocessing/task/horizon_sticker.R"))
source(here("preprocessing/task/conformity_preference.R"))
source(here("preprocessing/task/raven.R"))
source(here("preprocessing/task/free_description.R"))
source(here("preprocessing/task/causal_attribution.R"))
```

specify paths

```{r setup_paths}
US_PATH <- "data/1_raw_data/US/"
CN_PATH <- "data/1_raw_data/CN/"

MERGED_DATA_PATH <- here("data/2_merged/merged_all.csv")
MERGED_DEMOGS_PATH <- here("data/2_merged/merged_demogs.csv")


US_TBA_FD_PATH <- here("data/to_be_annotated/US/us_tba_fd.csv")
US_TBA_CA_PATH <- here("data/to_be_annotated/US/us_tba_ca.csv")
US_SYMS_LABEL_PATH <- here("data/to_be_annotated/US/us_syms_label.csv")
#funnel debriefing and sanity check 
US_HUMANREAD_PATH <- here("data/to_be_annotated/US/us_hr.csv")

CN_TBA_FD_PATH <- here("data/to_be_annotated/CN/cn_tba_fd.csv")
CN_TBA_CA_PATH <- here("data/to_be_annotated/CN/cn_tba_ca.csv")

CN_SYMS_LABEL_PATH <- here("data/to_be_annotated/CN/cn_syms_label.csv")
CN_HUMANREAD_PATH <- here("data/to_be_annotated/CN/cn_hr.csv")

# task-based exclusion and completion based exclusion
TRIMMED_DATA_PATH <- here("data/3_trimmed/trimmed_all.csv")
TRIMMED_DEMOGS_PATH <- here("data/3_trimmed/trimmed_demogs.csv")



# tidy data 
PROCESSED_MAIN_PATH <- here("data/4_processed/tidy_main.csv")
CONSERV_MAIN_PATH <- here("data/4_processed/tidy_conserv.csv")
```

```{r}

HAND_EXCLUSION <- c(
                  # participant requested 
                  "SS1609806859776"
                  
)

tidy_d <- read_csv(PROCESSED_MAIN_PATH) %>% 
  filter(! subject %in% HAND_EXCLUSION)
```


# Descriptives {.tabset}
## main
```{r}
tidy_d %>% 
  group_by(subject, culture) %>%
  summarise(n = n()) %>%
  group_by(culture) %>%
  count()
```



# RMTS

## Summary

plot proportion relation match

```{r}
#get means by ppt and group by country (0 is object match, 1 is relation)
RMTS_ms <- tidy_d %>%
  filter(task_name == "RMTS") %>% 
  group_by(subject, culture) %>%
  summarise(mean = mean(resp)) %>%
  group_by(culture) %>%
  tidyboot_mean(mean, na.rm=T)

#plot means and CIs
ggplot(RMTS_ms, 
       aes(x = culture, y = mean, col = culture)) + 
  geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper)) + 
  ylab("Proportion relation match in ambiguous RMTS") + 
  xlab("Country") + 
  ylim(c(0,1)) + 
  geom_hline(yintercept = .5, lty = 2) + 
  theme_classic() + 
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")
```



## Distribution 
response histogram


```{r}
#plot histogram
tidy_d %>%
  filter(task_name == "RMTS")  %>%
  group_by(subject, culture) %>%
  summarise(mean = mean(resp)) %>%
  ggplot(aes(x = mean)) +
  geom_histogram() +
  facet_wrap(~culture)


```





# Ravens

## Summary 
```{r}
#get means by ppt and group by country
RV_ms <- tidy_d %>%
  filter(task_name == "RV")  %>%
  group_by(subject, culture) %>%
  summarise(mean = mean(resp)) %>%
  group_by(culture) %>%
  tidyboot_mean(mean, na.rm=T) 

RV_mss <- tidy_d %>%
  filter(task_name == "RV")  %>%
  group_by(subject, culture) %>%
  summarise(mean = mean(resp))

#plot means and CIs
ggplot(RV_ms, 
       aes(x = culture, y = mean,color = culture)) + 
  geom_violin(data = RV_mss, show.legend = FALSE,  bw = 0.08)+
  geom_jitter(data = RV_mss, width = .2, alpha = 0.2) +
  geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), show.legend = FALSE) + 
guides(colour = guide_legend(override.aes = list(alpha = 1)))+
  ylab("Raven's SPM performance") + 
  xlab("Country") +
  ylim(0,1) + 
  scale_y_continuous(breaks = seq(0,1,0.25), 
                     labels = {function(x) paste0(as.character(x*100),"%")})+
  labs(color='Country') +
  theme_classic() +
  ggthemes::scale_color_solarized() + 
  scale_color_manual(values = c("red", "blue"))+
  theme(legend.position = "bottom")


ggplot(data = RV_ms, 
       aes(y = resp, x = culture, fill = culture)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), alpha = .8) +
geom_point(aes(y = resp, color = culture), 
           position = position_jitter(width = .15, height = .15), size = .5, alpha = 0.8) +
geom_boxplot(width = .1, alpha = 0.3) +
scale_y_continuous(breaks = seq(0,1,0.5), 
                     labels = {function(x) paste0(as.character(x*100),"%")})+
scale_color_manual(values = c("red", "blue"))+
scale_fill_manual(values = c("red", "blue"))+
guides(fill = FALSE) +
guides(color = FALSE) +
scale_color_manual(values = c("red", "blue"))+
ylab("Preference for unique option") + 
xlab("")+
theme_classic() + 
labs(title = "Uniqueness Preference") +
theme(plot.title = element_text(hjust = 0.5, size = 8), 
      plot.subtitle = element_text(hjust = 0.5, size = 6),
      text = element_text(size=8))  
```




## Histograms 
score histogram



```{r}
#plot histogram
tidy_d %>%
  filter(task_name == "RV")  %>%
  group_by(subject, culture) %>%
  summarise(mean = mean(resp)) %>%
  ggplot(aes(x = mean)) +
  geom_histogram(binwidth = .1) +
  facet_wrap(~culture)
```



## RT hist

### Main
```{r}
RT_raven <- read_csv(TRIMMED_DATA_PATH) %>% 
  filter(variable_type == "raven") %>% 
  select(subject, culture, rt) %>% 
  mutate(rt = as.numeric(rt))

RT_raven_ms <- RT_raven %>% 
  group_by(subject, culture) %>%
  summarise(mean = mean(rt)) %>%
  group_by(culture) %>%
  tidyboot_mean(mean, na.rm=T)

RT_raven %>% 
  ggplot(aes(x=rt))+ 
  geom_histogram()+
  facet_wrap(~culture)

ggplot(RT_raven_ms, 
       aes(x = culture, y = mean, col = culture)) + 
  geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper)) + 
  ylab("Raven RT") + 
  xlab("Country") + 
  theme_classic() + 
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")
```



# Conformance preference (pens, i.e., stickers)


Plot proportion conforming choice, with size of mean scaled by n

```{r}
#pen choice means 
pen_ms <- tidy_d %>%
  filter(task_name == "CP")  %>%
  group_by(culture) %>%
  tidyboot_mean(resp, na.rm=T)

#plot pen choice means
ggplot(pen_ms, 
       aes(x = culture, y = mean, col = culture)) + 
  geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) + 
  geom_point(aes(size=n)) +
  ylab("Proportion conforming choice") + 
  xlab("Country") + 
  theme_classic() + 
  ylim(0,1) + 
  scale_size_area(breaks = seq(0,50,5)) + 
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")
```

Quick stats check (not necessarily preregistered).

```{r}
cp_lm_data <- tidy_d %>%
  filter(task_name == "CP")
  
cp_mod <- glm(resp ~ culture, data = cp_lm_data, family = "binomial")
summary(cp_mod)
```



# Symbolic self-inflation (circles) 

## Score means (ratio)
```{r}
si_ratio_ms <- tidy_d %>%
  filter(task_name == "SI")  %>%
  filter(resp_type == "inflation_score_ratio") %>% 
  group_by(culture) %>% 
  tidyboot_mean(resp, na.rm=T)

#plot pen choice means
#
ggplot(si_ratio_ms, 
       aes(x = culture, y = mean, col = culture)) + 
  geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) + 
  geom_point(aes(size=n)) +
  ylab("(me_radius *2) / (other_radius * 2)") + 
  xlab("Country") + 
  theme_classic() + 
scale_size_area(breaks = seq(0,50,5)) + 
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")
```


## Score difference 
```{r}
si_diff_ms <- tidy_d %>%
  filter(task_name == "SI")  %>%
  filter(resp_type == "inflation_score_diff") %>% 
  group_by(culture) %>% 
  tidyboot_mean(resp, na.rm=T)


ggplot(si_diff_ms, 
       aes(x = culture, y = mean, col = culture)) + 
  geom_linerange(aes(ymin = ci_lower, ymax = ci_upper)) + 
  geom_point(aes(size=n)) +
  ylab("me_radius - other_radius") + 
  xlab("Country") + 
  theme_classic() + 
  ylim(0, -30)+
scale_size_area(breaks = seq(0,50,5)) + 
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")
```

## histogram 
```{r}


tidy_d %>%
  filter(task_name == "SI")  %>%
  filter(resp_type == "inflation_score_ratio") %>% 
  ggplot(aes(x = resp)) +
  geom_histogram(binwidth = .1) +
  facet_wrap(~culture)
  


tidy_d %>%
  filter(task_name == "SI")  %>%
  filter(resp_type == "inflation_score_diff") %>% 
  ggplot(aes(x = resp)) +
  geom_histogram(binwidth = .1) +
  facet_wrap(~culture)
```



# Causal attribution
## Summary

Plot means of person and situation attributions
```{r}
#get means by ppt and group by country
CA_ms <- tidy_d %>%
  filter(task_name == "CA") %>% 
  group_by(culture, resp_type, subject) %>%
  summarise(subject_mean = mean(resp)) %>%
  group_by(culture, resp_type) %>% 
  tidyboot_mean(subject_mean, na.rm=T)

#plot means and CIs
ggplot(CA_ms, 
       aes(x = culture, y = mean, col = resp_type)) + 
  geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), position = position_dodge2(.1)) + 
  ylab("Average number of attributions per trial") + 
  xlab("Country") + 
  ylim(c(0,1)) + 
  geom_hline(yintercept = .5, lty = 2) + 
  theme_classic() + 
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")

```

## Histogram
```{r}
tidy_d %>%
  filter(task_name == "CA")  %>%
  ggplot(aes(x = resp)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(resp_type~culture)


tidy_d %>%
  filter(task_name == "CA")  %>%
  group_by(culture, resp_type, subject) %>%
  summarise(subject_mean = mean(resp)) %>%
  ggplot(aes(x = subject_mean)) +
  geom_histogram(binwidth = 1) +
  facet_wrap(resp_type~culture)
```



# Horizon 

## Horizon height

Plot mean height of the horizon line


```{r}
# horizon height means
height_ms <- tidy_d %>%
  filter(task_name == "HZ") %>%
  filter(resp_type=="hz_height") %>%
  group_by(culture) %>%
  tidyboot_mean(resp, na.rm=T)

# plot horizon height means
ggplot(height_ms, 
       aes(x = culture, y = mean, col = culture)) + 
  geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper)) + 
  geom_jitter(data = tidy_d %>%
                filter(task_name == "HZ") %>%
                filter(resp_type=="hz_height"), 
              aes(x = culture, y = resp, col = culture), width = .1) + 
  ylab("Average horizon height") + 
  xlab("Country") + 
  theme_classic() + 
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")
```



## Histogram 

Plot horizon height histogram


```{r}
#horizon height histogram
tidy_d %>%
  filter(task_name == "HZ") %>%
  filter(resp_type == "hz_height") %>%
  ggplot(aes(x = resp)) +
  geom_histogram() +
  facet_wrap(~culture)
```


## Number of stickers

Plot mean number of stickers used in the horizon task

### Main

```{r}
#sticker count means
stickerCount_ms <- tidy_d %>%
  filter(task_name == "HZ") %>%
  filter(resp_type=="stkr_count") %>%
  group_by(culture) %>%
  tidyboot_mean(resp, na.rm=T)

#plot sticker count means
ggplot(stickerCount_ms, 
       aes(x = culture, y = mean, col = culture)) + 
  geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper)) + 
  geom_jitter(data = stickerCount_ms <- tidy_d %>%
                filter(task_name == "HZ") %>%
                filter(resp_type=="stkr_count") , 
              aes(x = culture, y = resp, col = culture), width = .1) + 
  ylab("Average number of stickers") + 
  xlab("Country") + 
  ylim(0, 20) + 
  theme_classic() + 
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")
```



## Number of stickers histograms 


```{r}
#sticker count histogram
tidy_d %>%
  filter(task_name == "HZ") %>%
  filter(resp_type == "stkr_count") %>%
  ggplot(aes(x = resp)) +
  geom_histogram() +
  facet_wrap(~culture)
```



## Area covered 

Plot average area covered by stickers in the horizon task

```{r}
#sticker area means
stickerArea_ms <- tidy_d %>%
  filter(task_name == "HZ") %>%
  filter(resp_type=="stkr_area") %>%
  group_by(culture) %>%
  tidyboot_mean(resp, na.rm=T)

#plot sticker count means
ggplot(stickerArea_ms, 
       aes(x = culture, y = mean, col = culture)) + 
  geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper)) + 
  ylab("Average area covered by stickers") + 
  xlab("Country") + 
  theme_classic() + 
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")
```




## Area covered hist 

Plot area covered by stickers for each participant in the horizon task

```{r}
#sticker area histogram
tidy_d %>%
  filter(task_name == "HZ") %>%
  filter(resp_type == "stkr_area") %>%
  ggplot(aes(x = resp)) +
  geom_histogram() +
  facet_wrap(~culture)
```



# Ebbinghaus 

## condition means 
```{r}
IC_ms <- tidy_d %>%
  filter(task_name == "EBB") %>%
  filter(task_info %in% c("IL","NC")) %>%
  group_by(subject, task_info, trial_info, culture) %>%
  summarise(mean = mean(resp)) %>%
  group_by(task_info, trial_info, culture) %>%
  tidyboot_mean(mean, na.rm=T)

ggplot(IC_ms, aes(x = trial_info, y = mean, col = culture)) + 
  facet_wrap(~task_info) + 
  geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper)) + 
  geom_smooth(method = "lm", formula = y ~ x + I(x^2)) + 
  ylab("Accuracy") + 
  xlab("Size Difference") + 
  theme_classic() + 
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")
```



# Free Description

## First mention 

Proportion of first-mentioned objects that are focal objects (first_mention_focal), per subject across stimuli. Plot means/CIs and histogram by culture.





```{r, eval = TRUE, include = TRUE}
# Free Description, first mention
#Proportion focal object first mention
mention_ms <- tidy_d %>%
  filter(task_name == "FD") %>%
  filter(resp_type=="first_mention_focal") %>%
  group_by(subject, culture) %>%
  summarise(mean = mean(resp)) %>%
  group_by(culture) %>%
  tidyboot_mean(mean, na.rm=T)

mention_mss <- tidy_d %>%
  filter(task_name == "FD") %>%
  filter(resp_type=="first_mention_focal") %>%
  group_by(subject, culture) %>%
  summarise(mean = mean(resp)) 



#plot first mention proportions, averaged by subject and then culture
ggplot(mention_ms, 
       aes(x = culture, y = mean, col = culture)) + 
  geom_violin(data = mention_mss, show.legend = FALSE, bw = 0.08)+
  geom_jitter(data = mention_mss, width = .2, alpha = 0.2) +
  geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), show.legend = FALSE) + 
  guides(colour = guide_legend(override.aes = list(alpha = 1)))+
  scale_y_continuous(breaks = seq(0,1,0.25), 
                     labels = {function(x) paste0(as.character(x*100),"%")})+
  ylab("Proportion of focal object first mentions") + 
  xlab("Country") + 
  labs(color='Country') +
  theme_classic() +
  scale_color_manual(values = c("red", "blue"))+
  theme(legend.position = "bottom")

```



## Imada coding 

Description score (bckgrd_description - focal_description), per subject across stimuli. Plot means/CIs and histogram by culture.
 
```{r}
imada_ms <- tidy_d %>%
  filter(task_name == "FD") %>%
  filter(grepl("imada", resp_type)) %>%
  group_by(subject, culture, resp_type) %>%
  summarise(mean = mean(resp)) %>%
  group_by(culture, resp_type) %>%
  tidyboot_mean(mean, na.rm=T)

imada_mss <- tidy_d %>%
  filter(task_name == "FD") %>%
  filter(grepl("imada", resp_type)) %>%
  group_by(subject, culture, resp_type) %>%
  summarise(mean = mean(resp)) 





ggplot(imada_ms, 
       aes(x = culture, y = mean, col = resp_type)) + 
  geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper), position = position_dodge2(.1)) + 
  ylab("Average number of descriptions") + 
  xlab("Country") + 
  #geom_hline(yintercept = .5, lty = 2) + 
  theme_classic() + 
  ggthemes::scale_color_solarized() + 
  theme(legend.position = "bottom")


```

## Consideration for selecting item 

There are no significant differences between cultures on the proportion of first mention being focal objects

![FD_item_proportion](misc/pilot_image/FD_item_proportion.png)

Also coded proportion of participants mentioning the picture looks "photoshopped" / faked

![FD_item_psmention](misc/pilot_image/FD_item_proportionPSmention.png)

Also roughly estimated the average description length for each item 

![FD_item_descriptionlength](misc/pilot_image/FD_item_description_length.png)













