---
title: "Poli et al. (2020) sims"
author: "Mike"
date: "12/2/2020"
output: html_document
---

```{r setup}
library(tidyverse)
library(permute)
```

Goal is to understand the relationship between information-theoretic measures over sequences. 

Computational reproducibility exercise with Poli, Serino, Mars, Hunnius (2020). Infants tailor their attention to maximize learning. *Science Advances*. 

Sequences are sequences of locations in a grid with four quadrants. 

# Sequences

> We created the sequences in MATLAB. First, 16 sequences were sampled pseudo-randomly, with the probabilities specified above as only constraint. Then, the sequences were concatenated. To check that the target location could be predicted only by relying on cue- target conditional probabilities, we fed the result of the sampling into a machine learning random forest classifier. If the classifier was able to reliably predict the target location with no information about the cue-target conditional probabilities (e.g., it successfully predicted the target location at trial N only based on target location at trial N-1), then the entire process was repeated and new sequences were sampled. 


```{r}
#sample_seq <- rep(1:4, 4)[shuffle(1:15)]
sample_seq <- c(1,1,3,4,1,1,4,1,2,1,1,4)
```

# Learning model

> The model is presented with a set of events x. An event is, for example, the target appearing in the upper left corner of the screen. The events followed each other until the sequence ended (or the in- fant looked away). The last event of a sequence, which also coincides with the length of the sequence, is named j, and the sequence can thus be denoted by Xj = {x1,...,xj}. The first goal of the model is to estimate the probability with which a certain event x will occur. Given that the target can appear in one of four possible locations k, the distribution of probabilities can be parameterized by the random vector p = [p1, ..., pk], where pk is the probability of the target ap- pearing in the kth location. In our specific case, the target locations are four, and thus, p = [p1, p2, p3, p4]. The ideal learner treats p1 : 4 as parameters that must be estimated trial by trial given Xj. In other words, given the past events up until the current trial, the ideal learner will estimate the probabilities with which the target will appear in any of the four possible target locations.
At the very beginning of each sequence, the ideal learner expects the target to appear in one of the four target locations with equal probability. This is expressed here as a prior Dirichlet distribution
P(p∣ ) = Dir(p; k) (1)
where all elements of  are equal to one,  = [1,1,1,1]. In this case, the parameter  determines prior expectations. If there is an imbal- ance between the values of  (e. g. ,  = [100,1,1,1]), this means that the model is biased into thinking that the target is more likely to ap- pear in the one location (p1 in the example) rather than the others.

Dirichlet-multinomial is the same thing as the beta binomial. 

Play with beta-binomial:

```{r}
x = seq(0,1,.01)
# shape parameters are the number of counts
plot(x, dbeta(x, shape1 = 200,shape2 = 400))
plot(x, dbeta(x, shape1= 20, shape2 = 400))

```


```{r}
prior <- c(1,1,1,1)
```


> Conversely, when the numbers are equal, the ideal learner has no biases toward any location. Moreover, high numbers indicate that the model has strong expectations, while low numbers indicate that the model will quickly change its expectations when presented with new evidence. Thus, specifying  = [1,1,1,1], we are defining a weak uniform prior distribution. In other words, the model has no bias toward any location but is ready to change these expectations if pre- sented with contradicting evidence.
At every trial, the prior distribution is updated given the obser- vation of the new event x from the set Xj. 
>  The posterior distribution of such update is given by
P(p∣Xj,)=Dir(pj;njk+k) (2)
j
where nk refers to the number of outcomes of type k observed up
until the trial j. As a practical example, imagine that, at trial 1, the model observes a target in the location 1 (i.e., [1, 0, 0, 0]). The values of  will be updated with the evidence accumulated, thus moving from [1, 1, 1, 1] to [2, 1, 1, 1]. This implies that now it is slightly more likely to see the target in location 1 than in any of the other loca- tions. Specifically, the probability of the target appearing in any lo- cation can be computed from the posterior distribution P(p∣Xj, ) in the following fashion
p(x =k∣X ,)=─j−1+K (3)
>In words, how likely the target is to appear in a certain corner is given by the total number of times it appeared in that corner, plus one (the value of ), divided by the total number of observations, plus 4 (the sum of the values of ). This updating rule implies that as evidence accumulates, new evidence will weigh less. Given that our sequences are stationary (i.e., the most likely location does not change within the same sequence), this assumption is justified for the current task.
At every trial j, the posterior Dirichlet distribution of trial j − 1 becomes the new prior distribution. The new prior is updated using (2) and the probabilities estimates are computed using (3). When infants look away and a new sequence is played, the prior is set back to (1). This means that we assume that when infants start looking to a new sequence, they consider it as independent of the previous ones. Previous research in adults demonstrated the suitability of this assumption (24).

```{r}
n <- 12
model <- tibble(trials = 0:n, 
                bin1 = 0, 
                bin2 = 0, 
                bin3 = 0, 
                bin4 = 0)
# set the prior 
model[1,2:5] <- as.list(prior)

for (i in 1:length(sample_seq)) {
  model[model$trials == i, 2:5] <- model[model$trials == i-1, 2:5]
  model[model$trials == i, sample_seq[i]+1] <-  
    model[model$trials == i-1, sample_seq[i]+1] + 1
}

# i = 1 
model

```
Imagine you were estimating a simple ML estimate of the probability. Then you'd just count he number of times you saw a particular thing and normalize:

$$
p(x_j = k|X^{j-1}) = \frac{n^{j-1}_k}{j-1}
$$
Now all we are going to do is add a prior $\alpha$ such that every bin has $\alpha$ added to it:

$$
p(x_j = k|X^{j-1},\alpha) = \frac{n^{j-1}_k + \alpha}{(j-1) + K\alpha}
$$
So when $\alpha = 1$, we get the poli formula:

$$
p(x_j = k|X^{j-1},\alpha) = \frac{n^{j-1}_k + 1}{(j-1) + K}
$$

So that means all we need to do is get our counts (which we did above), and then we normalize to get probabilities. 

```{r}
library(magrittr)
model %<>%
  rowwise() %>%
  mutate(total = sum(bin1 + bin2 + bin3 + bin4),
         p1 = bin1 / total,
         p2 = bin2 / total,
         p3 = bin3 / total,
         p4 = bin4 / total)

model$observed <- c(NA, sample_seq)
model
```



>In words, how likely the target is to appear in a certain corner is given by the total number of times it appeared in that corner, plus one (the value of ), divided by the total number of observations, plus 4 (the sum of the values of ). This updating rule implies that as evidence accumulates, new evidence will weigh less. Given that our sequences are stationary (i.e., the most likely location does not change within the same sequence), this assumption is justified for the current task.


# Measures

## Surprisal

I( x j = k ) = − log2 p( x j = k∣ X j−1, )

$$
I(x_j = k) = -\log_2 p(x_j = k | X^{j-1}, \alpha)
$$
```{r}
model$surprisal <- 0
for (i in 1:length(sample_seq)){
  curr_bin = sample_seq[i]
  curr_bin_column = paste0("p", curr_bin)
  prev_probabiliy = model %>%
    filter(trials == i-1) %>% 
    select(curr_bin_column) %>% 
    pull()
  
  curr_suprirsal = -log2(prev_probabiliy)
  
  model[model$trials == i, ]$surprisal <- curr_suprirsal
  
}
```


```{r}
model$surprisal <- NA
for (i in 1:(n+1)) {
  
  p_lasttrial <- c(model$p1[i-1], model$p2[i-1], model$p3[i-1], model$p4[i-1])
  model$surprisal[i] <- -log2( p_lasttrial[model$observed[i]]  )
}
model
```




## Predictability

>Note that, different from surprise, here, predictability is estimated considering also the event j, and not just up to j − 1. This formula was applied when relating predictability to infants’ looking away and looking time, as they have the information relative to trial j when they decide whether to look away and when they look at the target of trial j. However, saccadic latencies do not depend on Xj but rather on Xj−1, as when planning a saccade toward the target of trial j, the target has not appeared yet. Hence, a formula slightly different from (5) was used when relating predictability to saccadic latencies, in which Xj was replaced by Xj−1.

$$
-H(p^{j}) =\sum_{k=1}^{K}p(x^j = k | X^j, \alpha)\log_2 (x_j = k | X^{j}, \alpha)
$$



```{r}
model$predictability <- NA_real_
for (i in 1:(n+1)){
  current_trial_predict = model %>% 
    filter(trials == i) %>% 
    select(p1,p2,p3,p4) %>% 
    pivot_longer(p1:p4, names_to = "prob") %>% 
    mutate(log2_value = log2(value), 
           product = value * log2_value) %>% 
    summarise(sum(product)) %>% 
    pull()

  model[model$trials == i, ]$predictability <- current_trial_predict
  
  
}

model
```

## Learning progress

$$
D_{KL}(p^j ||p^{j-1}) =\sum_{k=1}^{K}p(x^j = k | X^j, \alpha)\log_2\frac {(x_j = k | X^{j}, \alpha)}{(x_j = k | X^{j-1}, \alpha)}
$$

> where p is the estimate of the parameters p1 : k at trial j, while pj-1 is estimate of the parameters p1 : k that was performed on the previous trial j − 1. Learning progress has been defined as the reduction in the error of an agent’s prediction (15). DKL is the divergence between a weighted average of prediction error at trial j and a weighted average of prediction error at trial j − 1, and hence, it is a suitable way to model learning progress in this task.


```{r}
model$learning_progress <- NA_real_
for (i in 1:(n+1)){

  i = 1 
  
  previous_trial_bin <- model %>% 
    filter(trials == i-1) %>% 
    select(bin1:bin4) %>% 
    pivot_longer(bin1:bin4, names_to = "bin", values_to = "prev_bin")
  
  current_trial_bin <- model %>% 
    filter(trials == i) %>% 
    select(bin1:bin4) %>% 
    pivot_longer(bin1:bin4, names_to = "bin", values_to = "curr_bin")
  
  trial_bin = left_join(previous_trial_bin, 
            current_trial_bin, 
            by = "bin")
  
  current_trial_prob <- model %>% 
    filter(trials == i) %>% 
    select(p1:p4) %>% 
    rename(bin1 = p1, bin2 = p2, bin3 = p3, bin4 = p4) %>% 
    pivot_longer(bin1:bin4, names_to = "bin", values_to = "curr_prob")
  
  trial_bin = left_join(trial_bin, 
                        current_trial_prob, 
                        by = "bin")
  
  d_bin = trial_bin %>% 
    mutate(d_bin = curr_prob * log2(curr_bin/prev_bin)) %>% 
    summarise(sum(d_bin)) %>% 
    pull()

  
  model[model$trials == i, ]$learning_progress <- d_bin
  
}

model
```


# plot
```{r}
df.plot <- model %>% 
  select(trials, surprisal, predictability, learning_progress) %>% 
  pivot_longer(cols = c("surprisal", "predictability", "learning_progress"), 
               names_to = "measure", 
               values_to = "value") %>% 
  filter(trials != 0)

surprise_plot <- df.plot %>% 
  filter(measure == "surprisal") %>% 
  ggplot(aes(x = trials, y = value)) + 
  geom_point() + 
  geom_line() + 
  ylab("surprise") + 
   scale_x_continuous(breaks =seq(1,12,1))

predictability_plot <- df.plot %>% 
  filter(measure == "predictability") %>% 
  ggplot(aes(x = trials, y = value)) + 
  geom_point() + 
  geom_line() + 
  ylab("predictability") + 
  scale_x_continuous(breaks =seq(1,12,1))

learning_progress_plot <- df.plot %>% 
  filter(measure == "learning_progress") %>% 
  ggplot(aes(x = trials, y = value)) + 
  geom_point() + 
  geom_line() + 
  ylab("learning_progress") + 
  scale_x_continuous(breaks =seq(1,12,1))

surprise_plot
predictability_plot
learning_progress_plot
```








